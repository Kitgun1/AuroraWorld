#pragma kernel CalculateEdges

struct HexagonEdge {
    float3 p1;
    float3 p2;
    float4 color;
};

RWTexture2D<float4> Result; // Output texture
StructuredBuffer<HexagonEdge> EdgesBuffer;
int EdgesCount;
float3 _CameraPos;
float _LineWidth;
float _MaxDistance;

[numthreads(8, 8, 1)]
void CalculateEdges(uint3 id : SV_DispatchThreadID)
{
    float2 uv = float2(id.xy) / float2(1920, 1080); 
    
    // Raycast from camera
    float3 rayDir = normalize(float3(uv * 2 - 1, 1));
    float3 rayOrigin = _CameraPos;
    
    float minDist = _LineWidth;
    float4 lineColor = float4(0, 0, 0, 0);
    
    // Оптимизация: проверяем только ближайшие N линий
    for (int i = 0; i < min(256, EdgesCount); i++) {
        HexagonEdge edge = EdgesBuffer[i];
        
        // Быстрый расчет расстояния до линии
        float3 ba = edge.p2 - edge.p1;
        float3 oa = rayOrigin - edge.p1;
        float3 baxray = cross(ba, rayDir);
        float3 oaxba = cross(oa, ba);
        float t = dot(oaxba, baxray) / dot(baxray, baxray);
        
        if (t > 0 && t < _MaxDistance) {
            float dist = length(oa + rayDir * t - ba * dot(oa, ba)/dot(ba, ba));
            if (dist < minDist) {
                minDist = dist;
                lineColor = edge.color;
            }
        }
    }
    
    Result[id.xy] = lineColor;
}
